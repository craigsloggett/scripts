#!/bin/sh
#
# macsh - macOS installation shell script.
#
# This script can be configured via the use of environment variables.
#
# +--------------------+--------------------------------------------+
# |           Variable | Description                                |
# +--------------------+--------------------------------------------+
# |                    |                                            |
# |        SOURCE_PATH | The path to the source directory.          |
# |                    |                                            |
# |       SECRETS_HOST | The server hosting sensitive files.        |
# |                    |                                            |
# |       SECRETS_USER | The user with access to sensitive files.   |
# |                    |                                            |
# |  DOTFILES_REPO_URL | Repository hosting the user dotfiles.      |
# |                    |                                            |
# | GPG_KEY_REMOTE_DIR | Remote directory of the GPG private key.   |
# |                    |                                            |
# |   GPG_KEY_FILENAME | Filename of the GPG private key to import. |
# |                    |                                            |
# |    PASS_REMOTE_DIR | Remote directory of the password-store.    |
# |                    |                                            |
# +--------------------+--------------------------------------------+

get_repo_name() {
  # Get the basename of the repository URL.
  repo_name="${1##*/}"
  repo_name="${repo_name%%.*}"

  printf '%s\n' "$repo_name"
}

get_repo_user() {
  # Get the GitHub user from the repository URL.
  repo_user="${1#*github.com/}"; 
  repo_user="${repo_user%%/*}"; 

  printf '%s\n' "$repo_user"
}

get_latest_repo() (
  repo_name="$(get_repo_name "$1")"
  repo_user="$(get_repo_user "$1")"

  mkdir -p "$SOURCE_PATH/$repo_user"
  cd "$SOURCE_PATH/$repo_user"

  if [ -d "$repo_name" ]; then
    cd "$repo_name"
    git pull
  else
    if [ -n "${2:-}" ]; then
      git clone -b "$2" "$1"
    else
      git clone "$1"
    fi
  fi
)

setup_xdg_directories() {
  # Export the XDG environment variables if they aren't already.
  export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
  export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
  export XDG_BIN_HOME="${XDG_BIN_HOME:-$HOME/.local/bin}"
  export XDG_LIB_HOME="${XDG_LIB_HOME:-$HOME/.local/lib}"

  # Create all directories.
  mkdir -p "$XDG_CONFIG_HOME"
  mkdir -p "$XDG_CACHE_HOME"
  mkdir -p "$XDG_DATA_HOME"
  mkdir -p "$XDG_BIN_HOME"
  mkdir -p "$XDG_LIB_HOME"
}

setup_system_configuration() {
  printf '%s\n' "Writing to /etc requires admin priviledges."
  printf '%s\n' "Asking for sudo password:"

  find etc -type d | while read -r dir; do
    sudo mkdir -p "/$dir"
  done

  find etc ! -type d | while read -r file; do
    sudo cp "$file" "/$file"
  done
}

setup_dotfiles() {
  dotfiles_repo_name="$(get_repo_name "$DOTFILES_REPO_URL")"
  dotfiles_repo_user="$(get_repo_user "$DOTFILES_REPO_URL")"

  get_latest_repo "$DOTFILES_REPO_URL" "macOS"

  if [ ! -f /usr/local/bin/stow ]; then
      brew install stow
  fi

  if [ ! -d "$XDG_CONFIG_HOME/zsh" ]; then
    (
      cd "$SOURCE_PATH/$dotfiles_repo_user/$dotfiles_repo_name/macOS"

      # GnuPG is special, we have to put the config next to the key database,
      # but we don't want to commit the key database to git. Making the directory
      # prior to running `stow` will ensure only the gpg.conf file is symlinked
      # not the parent directory.
      if [ -d gnupg ]; then
        gnupg_dir="$(find . -name 'gpg.conf')"
        gnupg_dir="${gnupg_dir##./gnupg/}"
        gnupg_dir="${gnupg_dir%%/gpg.conf}"

        mkdir -p "$HOME/$gnupg_dir"
      fi
  
      for dir in ./*; do
        if [ "$dir" != "./firefox" ] && [ "$dir" != "./README.md" ]; then
          ( stow --verbose --target="$HOME" "${dir##./}" )
        fi
      done
    )
  fi
}

setup_ssh() {
  if [ ! -d "$HOME/.ssh" ]; then
    ssh-keygen -t ed25519
  fi

  ssh-copy-id "$SECRETS_USER@$SECRETS_HOST"
}

setup_zsh() {
  chmod 755 /usr/local/share/zsh
  chmod 755 /usr/local/share/zsh/site-functions

  mkdir -p "$XDG_DATA_HOME/zsh"
}

setup_gnupg() {
  export GNUPGHOME="${XDG_DATA_HOME:=$HOME/.local/share}/gnupg"

  if [ ! -f /usr/local/bin/gpg ]; then
    brew install gnupg
  fi

  mkdir -p "$GNUPGHOME"
  chmod 700 "$GNUPGHOME"
  rsync -a "$SECRETS_USER@$SECRETS_HOST:$GPG_KEY_REMOTE_DIR/$GPG_KEY_FILENAME" .
  gpg --import "$GPG_KEY_FILENAME"

  # Wouldn't want to accidentally commit this file to git.
  rm "$GPG_KEY_FILENAME"
}

setup_pass() {
  export PASSWORD_STORE_DIR="${XDG_DATA_HOME:=$HOME/.local/share}/pass"

  if [ ! -f /usr/local/bin/pass ]; then
    brew install pass
  fi

  if [ ! -d "$PASSWORD_STORE_DIR" ]; then
    git clone "$SECRETS_USER@$SECRETS_HOST:$PASS_REMOTE_DIR" "$PASSWORD_STORE_DIR"
  fi
}

setup_pash() {
  export PASH_DIR="${XDG_DATA_HOME:=$HOME/.local/share}/pash"

  pash_repo_url="https://github.com/dylanaraps/pash.git"
  pash_repo_name="$(get_repo_name "$pash_repo_url")"
  pash_repo_user="$(get_repo_user "$pash_repo_url")"
  pash_remote_dir="$PASS_REMOTE_DIR"

  get_latest_repo "$pash_repo_url"

  cp "$SOURCE_PATH/$pash_repo_user/$pash_repo_name/pash" "$XDG_BIN_HOME/pash"

  if [ ! -d "$PASH_DIR" ]; then
    git clone "$SECRETS_USER@$SECRETS_HOST:$pash_remote_dir" "$PASH_DIR"
  fi
}

setup_vim() {
  # VIM is mostly setup with dotfiles, not much else to do.
  mkdir -p "$XDG_CACHE_HOME/vim"
}

setup_firefox() {
  if [ ! -d /Applications/Firefox.app ]; then
    brew cask install firefox
  fi

  # Firefox must be run once before the default-release folder is generated.
  if [ ! -d "$HOME/Library/Application Support/Firefox/Profiles/" ]; then
    /Applications/Firefox.app/Contents/MacOS/./firefox &
    sleep 10
    kill -9 "$(pgrep firefox)"
    sleep 5
  fi

  (
    cd "$HOME/Library/Application Support/Firefox/Profiles/"*.default-release
    cp "$(find "$SOURCE_PATH" -name 'user.js')" .
  )
}

setup_safari() {
  # Privacy: don’t send search queries to Apple
  defaults write com.apple.Safari UniversalSearchEnabled -bool false
  defaults write com.apple.Safari SuppressSearchSuggestions -bool true

  # Set Safari’s home page to `about:blank` for faster loading
  defaults write com.apple.Safari HomePage -string "about:blank"

  # Hide Safari’s bookmarks bar by default
  defaults write com.apple.Safari ShowFavoritesBar -bool false

  # Remove useless icons from Safari’s bookmarks bar
  defaults write com.apple.Safari ProxiesInBookmarksBar "()"

  # Disable AutoFill
  defaults write com.apple.Safari AutoFillFromAddressBook -bool false
  defaults write com.apple.Safari AutoFillPasswords -bool false
  defaults write com.apple.Safari AutoFillCreditCardData -bool false
  defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false

  # Disable Java
  defaults write com.apple.Safari WebKitJavaEnabled -bool false
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false
  
  # Block pop-up windows
  defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false
  
  # Enable “Do Not Track”
  defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true
  
  # Update extensions automatically
  defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true
}

setup_misc() {
  # Check for software updates daily, not just once per week.
  defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
  
  # Disable the sudden motion sensor as it’s not useful for SSDs
  sudo pmset -a sms 0

  # Firewall
  sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
  sudo launchctl load /System/Library/LaunchDaemons/com.apple.alf.agent.plist 2>/dev/null
}

main() {
  # Globally enable exit-on-error and require variables to be set.
  set -o errexit
  set -o nounset

  setup_xdg_directories
  setup_system_configuration
  setup_dotfiles

  setup_ssh
  setup_gnupg
  setup_zsh
  setup_pass
  setup_vim
  setup_firefox
  setup_safari
  setup_misc
}

main "$@"

