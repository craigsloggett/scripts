#!/usr/bin/env bash
#
# macsh - macOS installation shell script.
#
# This script can be configured via the use of environment variables.
#
# +--------------------+--------------------------------------------+
# |           Variable | Description                                |
# +--------------------+--------------------------------------------+
# |                    |                                            |
# |       SECRETS_HOST | The server hosting sensitive files.        |
# |                    |                                            |
# |       SECRETS_USER | The user with access to sensitive files.   |
# |                    |                                            |
# |  DOTFILES_REPO_URL | Repository hosting the user dotfiles.      |
# |                    |                                            |
# | GPG_KEY_REMOTE_DIR | Remote directory of the GPG private key.   |
# |                    |                                            |
# |   GPG_KEY_FILENAME | Filename of the GPG private key to import. |
# |                    |                                            |
# |      PASH_REPO_URL | Repository hosting `pash`.                 |
# |                    |                                            |
# |    PASH_REMOTE_DIR | Remote directory of the password-store.    |
# |                    |                                            |
# +--------------------+--------------------------------------------+

die() {
  printf 'ERROR: %s\n' "$1"
  exit 1
}

get_repo_name() {
  local repo_name

  # Get the basename of the repository URL.
  repo_name="${1##*/}"
  repo_name="${repo_name%%.*}"

  printf '%s\n' "$repo_name"
}

get_repo_user() {
  local repo_user

  # Get the GitHub user from the repository URL.
  repo_user="${1#*github.com/}"; 
  repo_user="${repo_user%%/*}"; 

  printf '%s\n' "$repo_user"
}

get_latest_repo() (
  local repo_name
  local repo_user

  repo_name="$(get_repo_name "$1")"
  repo_user="$(get_repo_user "$1")"

  mkdir -p "$SOURCE_PATH/$repo_user"
  cd "$SOURCE_PATH/$repo_user"

  if [ -d "$repo_name" ]; then
    cd "$repo_name"
    git pull
  else
    if [ -n "${2:-}" ]; then
      git clone -b "$2" "$1"
    else
      git clone "$1"
    fi
  fi
)

setup_xdg_directories() {
  # Export the XDG environment variables if they aren't already.
  export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
  export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
  export XDG_BIN_HOME="${XDG_BIN_HOME:-$HOME/.local/bin}"
  export XDG_LIB_HOME="${XDG_LIB_HOME:-$HOME/.local/lib}"

  # Create all directories.
  mkdir -p "$XDG_CONFIG_HOME"
  mkdir -p "$XDG_CACHE_HOME"
  mkdir -p "$XDG_DATA_HOME"
  mkdir -p "$XDG_BIN_HOME"
  mkdir -p "$XDG_LIB_HOME"
}

setup_system_configuration() {
  printf '%s\n' "Setting up system configuration and require admin priviledges. Asking for sudo password:"
  find etc -type d | while read -r dir; do
    sudo mkdir -p "$dir"
  done

  find etc ! -type d | while read -r file; do
    sudo cp "$file" "/$file"
  done
}

setup_dotfiles() {
  local dotfiles_repo_name="$(get_repo_name "$DOTFILES_REPO_URL")"
  local dotfiles_repo_user="$(get_repo_user "$DOTFILES_REPO_URL")"

  get_latest_repo "$DOTFILES_REPO_URL" "macOS"

  if [ ! -f /usr/local/bin/stow ]; then
      brew install stow
  fi

  if [ ! -d "$XDG_CONFIG_HOME/zsh" ]; then
    (
      cd "$SOURCE_PATH/$dotfiles_repo_user/$dotfiles_repo_name"

      # GnuPG is special, we have to put the config next to the key database,
      # but we don't want to commit the key database to git. Making the directory
      # prior to running `stow` will ensure only the gpg.conf file is symlinked
      # not the parent directory.
      if [ -d gnupg ]; then
        # Get the GnuPG directory (GNUPGHOME) from the dotfiles hierarchy.
        gnupg_dir="$(find . -name 'gpg.conf')"
        gnupg_dir="${gnupg_dir##./gnupg/}"
        gnupg_dir="${gnupg_dir%%/gpg.conf}"

        mkdir -p "$HOME/$gnupg_dir"
      fi
  
      for d in "$(ls | grep -v 'firefox\|README.*')";
      do
          ( stow --verbose --target="$HOME" $d );
      done
    )
  fi
}

setup_ssh() {
  if [ ! -d "$HOME/.ssh" ]; then
    ssh-keygen -t ed25519
  fi

  ssh-copy-id "$SECRETS_USER@$SECRETS_HOST"
}

setup_zsh() {
  chmod 755 /usr/local/share/zsh
  chmod 755 /usr/local/share/zsh/site-functions

  mkdir -p "$XDG_DATA_HOME/zsh"
}

setup_gpg() {
  export GNUPGHOME="${XDG_DATA_HOME:=$HOME/.local/share}/gnupg"

  if [ ! -f /usr/local/bin/gpg1 ]; then
    brew install gpg
  fi

  ## GnuPG handles the configuration file differently...
  mkdir -p "$GNUPGHOME"
  chmod 700 "$GNUPGHOME"

  rsync -a "$SECRETS_USER@$SECRETS_HOST:$GPG_KEY_REMOTE_DIR/$GPG_KEY_FILENAME" .

  gpg --import "$GPG_KEY_FILENAME"

  # Wouldn't want to accidentally commit this file to git.
  rm "$GPG_KEY_FILENAME"
}

setup_pash() {
  export PASH_DIR="${XDG_DATA_HOME:=$HOME/.local/share}/pash"

  get_latest_repo "$PASH_REPO_URL"

  cp "$SOURCE_PATH/$repo_user/pash/pash" "$XDG_BIN_HOME/pash"

  if [ ! -d "$PASH_DIR" ]; then
    git clone "$SECRETS_USER@$SECRETS_HOST:$PASH_REMOTE_DIR" "$PASH_DIR"
  fi
}

setup_vim() {
  # VIM is mostly setup with dotfiles, not much else to do.
  mkdir -p "${XDG_CACHE_HOME}"/vim
}

setup_firefox() {
  ##firefox

  #if [[ ! -d /Applications/Firefox.app ]]; then
  #    brew cask install firefox
  #fi

  #/Applications/Firefox.app/Contents/MacOS/./firefox &
  #sleep 10
  #kill -9 "$(pgrep firefox)"
  #sleep 5

  #mkdir -p "$HOME"/Source/GitHub/ghacksuserjs
  #cd "$HOME"/Source/GitHub/ghacksuserjs

  #if [[ -d "$HOME"/Source/GitHub/ghacksuserjs/ghacks-user.js ]]; then
  #    rm -rf "$HOME"/Source/GitHub/ghacksuserjs/ghacks-user.js
  #fi

  #git clone https://github.com/ghacksuserjs/ghacks-user.js.git
  #cd "$HOME"/Source/GitHub/ghacksuserjs/ghacks-user.js

  #if [[ "$(comm -13 <(sort -u user.js) <(sort -u "$HOME"/Source/GitHub/craigsloggett/dotfiles/firefox/user.js))" ]]; then
  #    echo "Obsolete syntax in Firefox user.js file."
  #fi

  #cd "$HOME"/Library/Application\ Support/Firefox/Profiles/*.default-release/
  #cp "$HOME"/Source/GitHub/craigsloggett/dotfiles/firefox/user.js .

  sleep 1
}

main() {
  # Globally enable exit-on-error and require variables to be set.
  set -o errexit
  set -o nounset

  setup_xdg_directories
  setup_system_configuration
  setup_dotfiles

  setup_ssh
  setup_gpg
  setup_zsh
  setup_pash
  setup_vim
  setup_firefox
}

main "$@"

# Setup Firefox

