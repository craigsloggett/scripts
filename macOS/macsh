#!/bin/bash
#
# macsh - macOS installation shell script.

main() {
    # Export the XDG environment variables if they aren't already.
    export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"${HOME}/.config"}"
    export XDG_CACHE_HOME="${XDG_CACHE_HOME:-"${HOME}/.cache"}"
    export XDG_DATA_HOME="${XDG_DATA_HOME:-"${HOME}/.local/share"}"
    export XDG_BIN_HOME="${XDG_BIN_HOME:-"${HOME}/.local/bin"}"
    export XDG_LIB_HOME="${XDG_LIB_HOME:-"${HOME}/.local/lib"}"

    # Create all directories beforehand.
    mkdir -p "${XDG_CONFIG_HOME}"
    mkdir -p "${XDG_CACHE_HOME}"
    mkdir -p "${XDG_DATA_HOME}"
    mkdir -p "${XDG_BIN_HOME}"
    mkdir -p "${XDG_LIB_HOME}"

    # ssh
    if [[ ! -f "${HOME}"/.ssh/id_ed25519 ]]; then
        ssh-keygen -t ed25519
        ssh-copy-id nerditup@jupiter.nerditup.ca
    fi

    # zsh
    find etc -type d | while read -r dir; do
        sudo mkdir -p "${dir}"
    done

    find etc ! -type d | while read -r file; do
        sudo cp "$file" "/${file}"
    done

    chmod 755 /usr/local/share/zsh
    chmod 755 /usr/local/share/zsh/site-functions

    mkdir -p "${XDG_DATA_HOME}"/zsh

    # dotfiles
    if [[ ! -d "${HOME}"/Source/GitHub/craigsloggett/dotfiles ]]; then
        cd "${HOME}"/Source/GitHub/craigsloggett
        git clone -b macOS https://github.com/craigsloggett/dotfiles.git
    fi

    if [[ ! -f /usr/local/bin/stow ]]; then
        brew install stow
    fi

    if [[ ! -d "${XDG_CONFIG_HOME}"/zsh ]]; then
        cd "${HOME}"/Source/GitHub/craigsloggett/dotfiles;
    
        for d in "$(ls | grep -v 'firefox\|gnupg\|README.*')";
        do
            ( stow --verbose --target="${HOME}" $d );
        done

        cd "${HOME}"
    fi

    # gpg
    export GNUPGHOME="${XDG_DATA_HOME:="${HOME}/.local/share"}/gnupg"

    mkdir -p "${GNUPGHOME}"
    cp "${HOME}/Source/GitHub/craigsloggett/dotfiles/gnupg/.local/share/gnupg/gpg.conf" "${GNUPGHOME}"

    chmod 700 "${GNUPGHOME}"
    chmod 600 "${GNUPGHOME}/gpg.conf"

    if [[ ! -f /usr/local/bin/gpg1 ]]; then
        brew install gpg1
    fi

    if [[ ! -f craig_sloggett_private_encrypt.asc ]]; then
        scp nerditup@jupiter.nerditup.ca:/srv/storage/.security/gnupg/personal/craig_sloggett_private_encrypt.asc .

        gpg1 --import craig_sloggett_private_encrypt.asc
    fi

    # pass

    if [[ ! -d "${XDG_DATA_HOME}/pass" ]]; then
        git clone nerditup@jupiter.nerditup.ca:/srv/storage/.security/pass/password-store "${XDG_DATA_HOME}/pass"
    fi

    if [[ ! -f /usr/local/bin/pass ]]; then
        brew install pass
    fi

    # vim
    mkdir -p "${XDG_CACHE_HOME}"/vim

    #firefox

    if [[ ! -d /Applications/Firefox.app ]]; then
        brew cask install firefox
    fi
}

main "$@"

#
#    # Clone dotfiles.
#    mkdir -p "${SOURCE_DIR}"/GitHub/craigsloggett
#    cd "${SOURCE_DIR}"/GitHub/craigsloggett
#    
#    git clone -b macOS https://github.com/craigsloggett/dotfiles.git
#
#    # Configure zsh
#    cd dotfiles/zsh
# Setup ZSH
#sudo install -C -m 644 etc/zshenv /etc/zshenv

## Setup XDG Directories
#mkdir -p "${_XDG_CONFIG_HOME}"
#mkdir -p "${_XDG_CACHE_HOME}"
#mkdir -p "${_XDG_DATA_HOME}"

## SSH
#mkdir -p "${HOME}"/.ssh
#scp "${SECURITY_USER}"@"${SECURITY_HOST}":"${SECURITY_DIR}"/ssh/"${COMPANY_NAME}"/id_ed25519 "${HOME}"/.ssh
#scp "${SECURITY_USER}"@"${SECURITY_HOST}":"${SECURITY_DIR}"/ssh/"${COMPANY_NAME}"/id_ed25519.pub "${HOME}"/.ssh

# Export the values in /etc/zshenv

# Setup GPG

# Setup Pash

# Setup Firefox

#637387

#!/usr/bin/env sh

# Default values for blank parameters
#DEBUG=0
#IN_FILE=/etc/some-input-file.conf
#OUT_FILE=/var/log/some-output-file.log
#
## Option parser, the order doesn't matter
#while [ $# -gt 0 ]; do
#    case "$1" in
#        -i|--input)
#            IN_FILE="$2"
#            shift 2
#            ;;
#        -o|--output)
#            OUT_FILE="$2"
#            shift 2
#            ;;
#        --debug) # Argument acting as a simple flag
#            DEBUG=1
#            shift 1
#            ;;
#        *)
#            break
#            ;;
#    esac
#done
#
## Some simple argument checks
#wrong_arg() {
#    echo "Error: invalid value for $1" >&2
#    exit 2
#}
#
#[ -f $IN_FILE ] || wrong_arg "input file"
#[ -f $OUT_FILE ] || wrong_arg "output file"
#
## The actual script can start below
## ...
